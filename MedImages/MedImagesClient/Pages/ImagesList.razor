@page "/imageslist"
@using MedImagesClient.Models;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Medical Images</PageTitle>

<h1>Medical Images</h1>

@if (images == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-success" @onclick="DownloadZip">Download Images</button>
    <button class="btn btn-danger" @onclick="OpenDelete">Delete Images</button>
    <button class="btn btn-primary" @onclick="OpenChangeGroup">Change Group</button>
    @if(checkedItems.Count == 1)
    {
        <button class="btn btn-warning" @onclick="() => OpenEditDesc(checkedItems.First())">Edit Description</button>
    } else
    {
        <button disabled class="btn btn-warning">Edit Description</button>
    }
    @*<a class="btn" href="http://127.0.0.1:8000/downloadzip/?filename=images.zip" download="images.zip"
       role="button" target="=_top">download</a>*@
    @if(error != null)
    {
        <span class="text-danger">@error</span>
    }
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter..."
        @bind="Filter"
        @bind:event="oninput">
    </div>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Title</th>
                <th>Type</th>
                <th>Description</th>
                <th>GroupName</th>
                <th>MetaData</th>
                <th>Miniature</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var image in images)
            {
                if (!IsVisible(image))
                    continue;
                <tr>
                    <td><input @onchange="() => CheckItem(image.Id)" class="form-check-input" type="checkbox" value=""></td>
                    <td>@image.Title</td>
                    <td>@image.Type</td>
                    <td>@image.Description</td>
                    <td>@image.GroupName</td>
                    <td><button class="btn btn-info" @onclick="() => OpenMetadata(image.Metadata)">Show metadata</button></td>
                    <td><img src="@string.Format("http://127.0.0.1:8000/showimage/?id={0}",image.Id)" width="200" height="200" /></td>
                </tr>
            }
        </tbody>
    </table>
}
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Metadata</h5>
                <button type="button" class="btn btn-danger" @onclick="() => CloseMetadata()" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" >
                @if (ModalText != null)
                {
                    foreach(var line in ModalText)
                    {
                        <p>@line</p>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseMetadata()">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal @EditDescModalClass" tabindex="-1" role="dialog" style="display:@EditDescModalDisplay">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Description</h5>
                <button type="button" class="btn btn-danger" @onclick="() => CloseEditDesc()" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="ChangeGroupID" class="form-group">
                    <InputTextArea @bind-Value="EditDescription" class="form-control" />
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => UpdateDescription()">Edit</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseEditDesc()">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal @DeleteModalClass" tabindex="-1" role="dialog" style="display:@DeleteModalDisplay">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Are you Sure?</h5>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => DeleteImage()">Yes, Delete</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseDelete()">Go back</button>
            </div>
        </div>
    </div>
</div>

<div class="modal @GroupModalClass" tabindex="-1" role="dialog" style="display:@GroupModalDisplay">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Choose group</h5>
            </div>
            @if(groups != null)
            {
                <EditForm Model="ChangeGroupID" class="form-group">
                    <InputSelect @bind-Value="ChangeGroupID" class="form-control" >
                        <option value="" disabled selected hidden style="color: rgba(128, 128, 128, 0.7);">Select group</option>
                        @foreach (var group in groups)
                        {
                            <option value="@group.GroupId">@group.GroupName</option>
                        }
                    </InputSelect>
                </EditForm>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => ChangeGroup(ChangeGroupID)">Change</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseGroup()">Go back</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ImageData>? images;
    private List<ImageGroup>? groups;
    private List<int> checkedItems = new List<int>();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public string[]? ModalText = null;
    public bool ShowBackdrop = false;

    public string DeleteModalDisplay = "none;";
    public string DeleteModalClass = "";
    public bool DeleteShowBackdrop = false;

    public string GroupModalDisplay = "none;";
    public string GroupModalClass = "";
    public string ChangeGroupID = "";
    public bool GroupShowBackdrop = false;

    public string EditDescModalDisplay = "none;";
    public string EditDescModalClass = "";
    public string EditDescription = "";
    public int? EditDescriptionId = null;
    public bool EditDescShowBackdrop = false;

    private string? error = null;
    public string Filter { get; set; }

    public bool IsVisible(ImageData image)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (image.Title.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (image.Type.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    public void OpenMetadata(string metadata)
    {
        var modalbody = metadata.Split("\n");
        ModalDisplay = "block;";
        ModalClass = "Show";
        ModalText = modalbody;
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void OpenDelete()
    {
        DeleteModalDisplay = "block;";
        DeleteModalClass = "Show";
        DeleteShowBackdrop = true;
        StateHasChanged();
    }

    public void OpenChangeGroup()
    {
        GroupModalDisplay = "block;";
        GroupModalClass = "Show";
        GroupShowBackdrop = true;
        StateHasChanged();
    }

    public void OpenEditDesc(int id)
    {
        var image = images.First(x => x.Id == id);
        EditDescModalDisplay = "block;";
        EditDescModalClass = "Show";
        EditDescShowBackdrop = true;
        EditDescription = image.Description;
        EditDescriptionId = id;
        StateHasChanged();
    }

    public void CheckItem(int id)
    {
        if(checkedItems.Contains(id))
        {
            checkedItems.Remove(id);
        } else
        {
            checkedItems.Add(id);
        }
    }

    public void CloseMetadata()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ModalText = null;
        ShowBackdrop = false;
        StateHasChanged();
    }

    public void CloseDelete()
    {
        DeleteModalDisplay = "none";
        DeleteModalClass = "";
        DeleteShowBackdrop = false;
        StateHasChanged();
    }

    public void CloseGroup()
    {
        GroupModalDisplay = "none";
        GroupModalClass = "";
        GroupShowBackdrop = false;
        ChangeGroupID = "";
        StateHasChanged();
    }

    public void CloseEditDesc()
    {
        EditDescModalDisplay = "none";
        EditDescModalClass = "";
        EditDescShowBackdrop = false;
        EditDescription = "";
        EditDescriptionId = null;
        StateHasChanged();
    }

    private async Task DownloadZip()
    {
        if(checkedItems.Count == 0)
        {
            error = "Please check some images for download";
            return;
        } else
        {
            error = null;
        }

        var response = await Http.PostAsJsonAsync("http://127.0.0.1:8000/downloadimages/", checkedItems);
        var filename = await response.Content.ReadAsStringAsync();
        string url = string.Format("http://127.0.0.1:8000/downloadzip/?filename={0}", filename.Substring(1,filename.Length-2));

        await JS.InvokeVoidAsync("blazorDownloadFile", "images.zip", url);
    }

    private async Task DeleteImage()
    {
        if(checkedItems.Count != 0)
        {
            var response = await Http.PostAsJsonAsync("http://127.0.0.1:8000/deleteimages/", checkedItems);
            CloseDelete();
            images = await Http.GetFromJsonAsync<List<ImageData>>("http://127.0.0.1:8000/getimages/");
            checkedItems.Clear();
        }
    }

    private async Task ChangeGroup(string groupId)
    {
        if (checkedItems.Count != 0 && groupId != "")
        {
            var response = await Http.PutAsJsonAsync("http://127.0.0.1:8000/updategroup/", new { ids = checkedItems, groupID = groupId });
            CloseGroup();
            images = await Http.GetFromJsonAsync<List<ImageData>>("http://127.0.0.1:8000/getimages/");
            ChangeGroupID = "";
        }
    }

    private async Task UpdateDescription()
    {
        if (EditDescriptionId != null)
        {
            var response = await Http.PutAsJsonAsync<UpdateDescriptionDTO>("http://127.0.0.1:8000/updatedesc/", new UpdateDescriptionDTO {Id = EditDescriptionId, Description = EditDescription});
            CloseEditDesc();
            images = await Http.GetFromJsonAsync<List<ImageData>>("http://127.0.0.1:8000/getimages/");
            EditDescriptionId = null;
            EditDescription = "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        images = await Http.GetFromJsonAsync<List<ImageData>>("http://127.0.0.1:8000/getimages/");
        groups = await Http.GetFromJsonAsync<List<ImageGroup>>("http://127.0.0.1:8000/getgroups/");
    }
}
@page "/addimage"
@using System.Net.Http.Headers;
@using MedImagesClient.Models;
@inject HttpClient Http
@inject NavigationManager Nav
<PageTitle>Add Images</PageTitle>
@if (sending == true)
{
    <p><em>Loading...</em></p>
}else
{
    <h3>Add Images</h3>
    <EditForm Model="@Model" OnSubmit="@Submit">
        <div>
            <div class="mb-3">
                <label for="exampleFormControlInput1" class="form-label">Group Name</label>
                <InputText @bind-Value="Model!.GroupName" id="exampleFormControlInput1" placeholder="DICOM PHOTOS v3" />
            </div>
            <div class="mb-3">
                <label for="exampleFormControlInput2" class="form-label">Description</label>
                <InputTextArea @bind-Value="Model!.Description" id="exampleFormControlInput2" placeholder="about this, this and this" />
            </div>
            @if (error2 != null)
            {
                <span class="text-danger">@error</span>
            }
            <div class="mb-3">
                <label for="exampleFormControlInput3" class="form-label">Files/Images</label>
                <InputFile OnChange="OnInputFileChange" multiple id="exampleFormControlInput3" />
            </div>
            @if (error != null)
            {
                <span class="text-danger">@error</span>
            }
            <button type="submit">Submit</button>
        </div>
    </EditForm>
}

@code {
    public AddImageVM? Model { get; set; }

    private IReadOnlyList<IBrowserFile>? browserFiles = null;
    private int maxAllowedFiles = 100;
    private long maxFileSize = 10737418240; //MAX FILE SIZE 10 GB
    private bool sending = false;

    private string serverUrl = "http://127.0.0.1:8000/uploadimages/";
    private string? error = null;
    private string? error2 = null;

    protected override void OnInitialized() => Model ??= new();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        browserFiles = e.GetMultipleFiles(maxAllowedFiles);
    }

    private async Task Submit()
    {
        if(Model.GroupName == string.Empty || Model.Description == string.Empty)
        {
            error2 = "Please provide group name and description values";
            return;
        }
        else if(browserFiles==null)
        {
            error = "You need to choose some files";
            return;
        } else
        {
            error = null;
            error2 = null;
        }

        using var content = new MultipartFormDataContent();
        //content.Headers.ContentType.MediaType = "multipart/form-data";
        foreach (var file in browserFiles)
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            //fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(content: fileContent,
            name: "files",
            fileName: file.Name
            );
            //content.Add(new ByteArrayContent(file.OpenReadStream()));
        }
        content.Add(new StringContent(Model.GroupName), "groupName");
        content.Add(new StringContent(Model.Description), "description");
        try
        {
            sending = true;
            var response = await Http.PostAsync(serverUrl, content);
        } catch(Exception e) {

        } finally
        {
            Nav.NavigateTo("/imageslist");
        }
    }
}
